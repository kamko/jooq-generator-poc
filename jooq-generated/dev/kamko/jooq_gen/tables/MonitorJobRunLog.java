/*
 * This file is generated by jOOQ.
 */
package dev.kamko.jooq_gen.tables;


import dev.kamko.jooq_gen.Indexes;
import dev.kamko.jooq_gen.Keys;
import dev.kamko.jooq_gen.Public;
import dev.kamko.jooq_gen.tables.records.MonitorJobRunLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MonitorJobRunLog extends TableImpl<MonitorJobRunLogRecord> {

    private static final long serialVersionUID = 1688009218;

    /**
     * The reference instance of <code>public.monitor_job_run_log</code>
     */
    public static final MonitorJobRunLog MONITOR_JOB_RUN_LOG = new MonitorJobRunLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonitorJobRunLogRecord> getRecordType() {
        return MonitorJobRunLogRecord.class;
    }

    /**
     * The column <code>public.monitor_job_run_log.id</code>.
     */
    public final TableField<MonitorJobRunLogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('monitor_job_run_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.monitor_job_run_log.run_started</code>.
     */
    public final TableField<MonitorJobRunLogRecord, Timestamp> RUN_STARTED = createField(DSL.name("run_started"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.monitor_job_run_log.run_finished</code>.
     */
    public final TableField<MonitorJobRunLogRecord, Timestamp> RUN_FINISHED = createField(DSL.name("run_finished"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.monitor_job_run_log.articles_processed</code>.
     */
    public final TableField<MonitorJobRunLogRecord, Integer> ARTICLES_PROCESSED = createField(DSL.name("articles_processed"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.monitor_job_run_log</code> table reference
     */
    public MonitorJobRunLog() {
        this(DSL.name("monitor_job_run_log"), null);
    }

    /**
     * Create an aliased <code>public.monitor_job_run_log</code> table reference
     */
    public MonitorJobRunLog(String alias) {
        this(DSL.name(alias), MONITOR_JOB_RUN_LOG);
    }

    /**
     * Create an aliased <code>public.monitor_job_run_log</code> table reference
     */
    public MonitorJobRunLog(Name alias) {
        this(alias, MONITOR_JOB_RUN_LOG);
    }

    private MonitorJobRunLog(Name alias, Table<MonitorJobRunLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private MonitorJobRunLog(Name alias, Table<MonitorJobRunLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MonitorJobRunLog(Table<O> child, ForeignKey<O, MonitorJobRunLogRecord> key) {
        super(child, key, MONITOR_JOB_RUN_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MONITOR_JOB_RUN_LOG_PKEY);
    }

    @Override
    public Identity<MonitorJobRunLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_MONITOR_JOB_RUN_LOG;
    }

    @Override
    public UniqueKey<MonitorJobRunLogRecord> getPrimaryKey() {
        return Keys.MONITOR_JOB_RUN_LOG_PKEY;
    }

    @Override
    public List<UniqueKey<MonitorJobRunLogRecord>> getKeys() {
        return Arrays.<UniqueKey<MonitorJobRunLogRecord>>asList(Keys.MONITOR_JOB_RUN_LOG_PKEY);
    }

    @Override
    public MonitorJobRunLog as(String alias) {
        return new MonitorJobRunLog(DSL.name(alias), this);
    }

    @Override
    public MonitorJobRunLog as(Name alias) {
        return new MonitorJobRunLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MonitorJobRunLog rename(String name) {
        return new MonitorJobRunLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonitorJobRunLog rename(Name name) {
        return new MonitorJobRunLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Timestamp, Timestamp, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
