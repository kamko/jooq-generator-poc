/*
 * This file is generated by jOOQ.
 */
package dev.kamko.jooq_gen.tables;


import dev.kamko.jooq_gen.Indexes;
import dev.kamko.jooq_gen.Keys;
import dev.kamko.jooq_gen.Public;
import dev.kamko.jooq_gen.tables.records.MediaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Media extends TableImpl<MediaRecord> {

    private static final long serialVersionUID = 1819507611;

    /**
     * The reference instance of <code>public.media</code>
     */
    public static final Media MEDIA = new Media();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MediaRecord> getRecordType() {
        return MediaRecord.class;
    }

    /**
     * The column <code>public.media.id</code>.
     */
    public final TableField<MediaRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('media_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.media.url</code>.
     */
    public final TableField<MediaRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.media.caption</code>.
     */
    public final TableField<MediaRecord, String> CAPTION = createField(DSL.name("caption"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.media.media_type</code>.
     */
    public final TableField<MediaRecord, String> MEDIA_TYPE = createField(DSL.name("media_type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.media</code> table reference
     */
    public Media() {
        this(DSL.name("media"), null);
    }

    /**
     * Create an aliased <code>public.media</code> table reference
     */
    public Media(String alias) {
        this(DSL.name(alias), MEDIA);
    }

    /**
     * Create an aliased <code>public.media</code> table reference
     */
    public Media(Name alias) {
        this(alias, MEDIA);
    }

    private Media(Name alias, Table<MediaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Media(Name alias, Table<MediaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Media(Table<O> child, ForeignKey<O, MediaRecord> key) {
        super(child, key, MEDIA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEDIA_PKEY);
    }

    @Override
    public Identity<MediaRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEDIA;
    }

    @Override
    public UniqueKey<MediaRecord> getPrimaryKey() {
        return Keys.MEDIA_PKEY;
    }

    @Override
    public List<UniqueKey<MediaRecord>> getKeys() {
        return Arrays.<UniqueKey<MediaRecord>>asList(Keys.MEDIA_PKEY);
    }

    @Override
    public Media as(String alias) {
        return new Media(DSL.name(alias), this);
    }

    @Override
    public Media as(Name alias) {
        return new Media(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(String name) {
        return new Media(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(Name name) {
        return new Media(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
