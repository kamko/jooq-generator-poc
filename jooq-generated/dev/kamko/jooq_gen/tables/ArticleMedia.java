/*
 * This file is generated by jOOQ.
 */
package dev.kamko.jooq_gen.tables;


import dev.kamko.jooq_gen.Keys;
import dev.kamko.jooq_gen.Public;
import dev.kamko.jooq_gen.tables.records.ArticleMediaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleMedia extends TableImpl<ArticleMediaRecord> {

    private static final long serialVersionUID = 367914375;

    /**
     * The reference instance of <code>public.article_media</code>
     */
    public static final ArticleMedia ARTICLE_MEDIA = new ArticleMedia();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleMediaRecord> getRecordType() {
        return ArticleMediaRecord.class;
    }

    /**
     * The column <code>public.article_media.article_id</code>.
     */
    public final TableField<ArticleMediaRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.article_media.media_id</code>.
     */
    public final TableField<ArticleMediaRecord, Long> MEDIA_ID = createField(DSL.name("media_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.article_media</code> table reference
     */
    public ArticleMedia() {
        this(DSL.name("article_media"), null);
    }

    /**
     * Create an aliased <code>public.article_media</code> table reference
     */
    public ArticleMedia(String alias) {
        this(DSL.name(alias), ARTICLE_MEDIA);
    }

    /**
     * Create an aliased <code>public.article_media</code> table reference
     */
    public ArticleMedia(Name alias) {
        this(alias, ARTICLE_MEDIA);
    }

    private ArticleMedia(Name alias, Table<ArticleMediaRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticleMedia(Name alias, Table<ArticleMediaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ArticleMedia(Table<O> child, ForeignKey<O, ArticleMediaRecord> key) {
        super(child, key, ARTICLE_MEDIA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<ArticleMediaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArticleMediaRecord, ?>>asList(Keys.ARTICLE_MEDIA__ARTICLE_MEDIA_ARTICLE_ID_FKEY, Keys.ARTICLE_MEDIA__ARTICLE_MEDIA_MEDIA_ID_FKEY);
    }

    public Article article() {
        return new Article(this, Keys.ARTICLE_MEDIA__ARTICLE_MEDIA_ARTICLE_ID_FKEY);
    }

    public Media media() {
        return new Media(this, Keys.ARTICLE_MEDIA__ARTICLE_MEDIA_MEDIA_ID_FKEY);
    }

    @Override
    public ArticleMedia as(String alias) {
        return new ArticleMedia(DSL.name(alias), this);
    }

    @Override
    public ArticleMedia as(Name alias) {
        return new ArticleMedia(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMedia rename(String name) {
        return new ArticleMedia(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleMedia rename(Name name) {
        return new ArticleMedia(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
